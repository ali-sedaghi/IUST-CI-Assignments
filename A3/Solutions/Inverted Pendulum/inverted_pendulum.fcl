FUNCTION_BLOCK Inverted_Pendulum

    VAR_INPUT
        theta: REAL;        (* angle of pendulum 0-360 degree*)
        theta_dot: REAL;    (* angular velocity of pendulum *)
        x_dot: REAL;        (* speed of carriage *)
        x_dot_dot: REAL;        (* accelaration of carriage *)
    END_VAR

    VAR_OUTPUT
        F: REAL;           (* force to carriage *)
    END_VAR

    FUZZIFY theta
        (* terms *)
        (* angle, membership value *)

        TERM center := (170, 0) (180, 1) (190, 0);

        TERM upperRight := (150, 0) (165, 1) (180, 0);
        TERM lowerRight := (0, 1) (90, 0);

        TERM upperLeft := (180, 0) (195, 1) (210, 0);
        TERM lowerLeft := (270, 0) (360, 1);

    END_FUZZIFY

    FUZZIFY theta_dot
        TERM stop := (-0.5,0) (0,1) (0.5,0);

        TERM cw1 := (-4, 0) (-1, 1) (-0.3, 0);
        TERM cw2 := (-6, 0) (-3, 1) (-1, 0);
        TERM cw3 := (-8, 1) (-3, 0);

        TERM ccw1 := (0.3, 0) (1, 1) (4, 0);
        TERM ccw2 := (1, 0) (3, 1) (6, 0);
        TERM ccw3 := (3, 0) (8, 1);
    END_FUZZIFY

    FUZZIFY x_dot
        TERM stop := (-1, 0) (0, 1) (1, 0);
    END_FUZZIFY

    FUZZIFY x_dot_dot
        TERM stop := (-0.5, 0) (0, 1) (0.5, 0);
    END_FUZZIFY

    DEFUZZIFY F
        (* terms *)
        TERM stop := (-0.4, 0) (0, 1) (0.4, 0);

        TERM goRight1 := (0, 0) (10, 1) (20, 0);
        TERM goRight2 := (5, 0) (20, 1) (50, 0);
        TERM goRight3 := (20, 0) (50, 1) (60, 0);
        TERM goRight4 := (50, 0) (70, 1) (80, 0);

        TERM goLeft1 := (-20, 0) (-10, 1) (0, 0);
        TERM goLeft2 := (-50, 0) (-20, 1) (-5, 0);
        TERM goLeft3 := (-60, 0) (-50, 1) (-20, 0);
        TERM goLeft4 := (-80, 0) (-70, 1) (-50, 0);
        
        ACCU: MAX;
        METHOD: COG;
        DEFAULT := 0;
    END_DEFUZZIFY

    RULEBLOCK Inverted_Pendulum
        (* rules *)

        AND: AlgebraicProduct;
        OR: MAX;

        RULE 1:
            IF theta IS center
            AND theta_dot IS cw1
            THEN F IS goRight1;

        RULE 2:
            IF theta IS lowerRight
            AND (theta_dot IS cw1 OR theta_dot IS cw2)
            THEN F IS goRight2;

        RULE 3:
            IF theta IS upperRight
            THEN F IS goRight2;

        RULE 4:
            IF theta IS center
            AND theta_dot IS cw2
            THEN F IS goRight3;

        RULE 5:
            IF theta IS center
            AND theta_dot IS cw3
            THEN F IS goRight4;

        RULE 6:
            IF theta IS center
            AND theta_dot IS ccw1
            THEN F IS goLeft1;

        RULE 7:
            IF theta IS upperLeft
            THEN F IS goLeft2;

        RULE 8:
            IF theta IS lowerLeft
            AND (theta_dot IS ccw1 OR theta_dot IS ccw2)
            THEN F IS goLeft2;

        RULE 9:
            IF theta IS center
            AND theta_dot IS ccw2
            THEN F IS goLeft3;

        RULE 10:
            IF theta IS center
            AND theta_dot IS ccw3
            THEN F IS goLeft4;
        
        RULE 11:
            IF theta IS center
            AND theta_dot IS stop
            AND x_dot IS stop
            AND x_dot_dot IS stop
            THEN F IS stop;

    END_RULEBLOCK

END_FUNCTION_BLOCK